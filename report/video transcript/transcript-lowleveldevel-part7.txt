Raspberry Pi Bare Metal Tutorial - Part 7 (Boot to EL1) - YouTube
https://www.youtube.com/watch?v=UOpODhRuP3I

Transcript:
(00:01) hi and welcome back in our previous video in this series we created our own arm stub so that the raspberry pi would boot into exception level 3. in this video we're going to go through the process of booting up our kernel and exception level one so let's get started first if you haven't already done so you're gonna want to download the art 64 reference manual you can go to google and just type that in here and the very first link's going to show you where to actually download it go here there's a download button you
(00:38) select the document i'm using version f.c but they're all relatively the same some minor updates so i'm going to go ahead and open mine that i already downloaded here all right there we go so now let's go on to the boot code here if we move into our boot.s file under the master label where this is where we're going to start the process of moving to el1 we're going to use ldr x0 we're going to give it the value of sctrl value mmu disabled then we're going to use the msr instruction to
(01:24) put that value into the sctlr el1 special register so where do we get that value from we're going to have to actually create a sysregs.h file here so let's start with pregnant wants so i'm going to just paste these values in here they came right from uh sergey's tutorial which also comes from the linux kernel here um so here you go this mmu disabled value it's made up of an ore of these values above it the first is a set of reserved bits that are set which i don't know fully the details on
(02:07) those but all these bits are uh just set to zero but the important one here is this mmu enabled which you'll see is bit zero so bit zero being set here so if we go here to section d13.2.113 in the manual that's where the details of this register are and the very first bit there which we saw in that uh define here see if we scroll down to bit 0 it'll provide a better explanation here we go m bit 0 and that's the mmu enable bit so we're setting it to zero that would mean it's disabled if you set
(02:50) it to one it would be enabled according to the documentation here so let's go to here you see we have the mmu disabled as zero mmu enabled is is one so we're using the disabled value in our in our macro here so that's where this value comes from and we need to include our header file here as well to use that so for the next part we're going to use the ldr command again and we're going to load this value hcr value in msr we're using for hcr el2 now this is another register here we'll look that up into in the manual
(03:44) that's section deed 13.2.47 so if we go to there there we go here's here's the register's definition so here we see the 64-bit register if we scroll down what we want to look at first yeah let's go to the uh regs file and paste this data in here so it looks like bit 31 is the important one here that's the rw field the rw bit so let's scroll down to that and here we go the rw bit so this states that the execution state control so if it's set to zero it's going to put all levels in
(04:33) a arch 32 but we want it a arch 64. so that's why we set this value to 1. and so let's go here back to the boot code so the next register we're going to load this value scr underscore value and we're going to use msr to load that into the screl3 register so let's look that one up as well in the reference manual oh first we'll go ahead and add it to the sis regs here and yeah i put the comment here for the uh where to find that in the manual actually let me go ahead and add that comment to each of these registers so
(05:31) you have it so in this one there's a set of reserved bits we'll go to the manual here d13.2.112 this is the screl3 register we have these bits four and five are reserved bits that we need to set and then we have this ns bit at zero and then yeah rw there's there's the value that we need to use here let's scroll down here to bit 10 that's the rw bit and it's the same as the previous register where we have 0 for arc32 and one for arc64 and of course we want to jump into 64-bit mode from this register
(06:29) and then we have the ns bit here which shows whether the el0 and el1 will be in a secure state so we have the rw register the twitter setting and the ns register that we are also setting so it's the zero bit with the value one so let's go back over here to the reference manual so in here see right here we have the value one so that indicates that exception levels lower than el3 are going to be in a non-secure state so memory access from those exception levels cannot access secure memory so those are the defines here and we see
(07:24) we're setting the reserved values there in the rw and the ns flag for scr value so let's go back here to the boot and our next register we need to set up ldrx0 we're going to do the spsr value which brings msr to the spsr el3 register let's look that one up here actually let's go ahead and add it to the cis red first so that one's in c 5.2.
(08:08) 19 take a jump over to that section here in the manual so spsr el3 now in this one there's a few flags that we need to set and then we need to set the mode so bits eight seven and six and then we need to set the mode which is from bit zero to three so we'll see eight seven and six here are the interrupt mask the s error interrupt mass irq mask and the fast irq mask so now we're gonna jump down here to m so bits 0 to 3 this is the exception level we want to move to and we want to move to el1h and you'll
(09:00) see that's the binary value of 5 which is why so we see our mask that we're setting the value 7 starting at bit six so that'll be six seven eight and then el1 is the value that we wanna set which you see five as the value there's also a value for el2 but we're not using that we're just using the mask all and the el1h flag so let's go back here to the boot code all right so after here if one more register here we're going to run adr to get the address of the el1 entry and what is el1 entry
(09:49) it's this label we're adding right here so we want to essentially jump to this label so we're going to use msr to elr el3 the value the address that we put into x0 so what essentially this means is when we're finished executing this irq we're going to jump to this el1 entry section in that el1 exception level so let's go ahead and make clean and make this code raspberry pi 3.
(10:25) we've got an error here okay this reserved flag i need to yeah i i changed this let me jump back over to the sysregs header file just put that back to one line here make and we got some variable wrong here m s c t r l okay yeah that's the wrong spelling here this should be msctlr so there we go and there we go it compiled properly so if we go here and reboot the raspberry pi with our updated sd card let's start it up here here we see exception level three and why did it do that it should be exception level one so let's
(11:27) jump back here let's go back to our boot code and let's see we have going through the master um okay i think i see a problem here once we need to actually return from the exception by using the e-ret instruction here and that's gonna reset the program counter return from this current exception level and into el1 so you can see i've already run it here and i was debugging here but i'm gonna run it again here and let's see start up now we see exception level one so now this we're in the proper
(12:06) exception level to start our kernel so i think that's a good stopping point for this video now that our kernel is running in el 1 we can move on to the initialization of other features and functionality i think in the next video we'll start with the interrupt vectors i hope you enjoyed this video if you did please like and subscribe and comment if you have any questions or thoughts on this process and thanks for watching
